/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/admin/activities/route";
exports.ids = ["app/api/admin/activities/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/mysql2/lib sync recursive ^cardinal.*$":
/*!****************************************************!*\
  !*** ./node_modules/mysql2/lib/ sync ^cardinal.*$ ***!
  \****************************************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "(rsc)/./node_modules/mysql2/lib sync recursive ^cardinal.*$";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "process":
/*!**************************!*\
  !*** external "process" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("process");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "string_decoder":
/*!*********************************!*\
  !*** external "string_decoder" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("string_decoder");

/***/ }),

/***/ "timers":
/*!*************************!*\
  !*** external "timers" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("timers");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadmin%2Factivities%2Froute&page=%2Fapi%2Fadmin%2Factivities%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Factivities%2Froute.ts&appDir=C%3A%5CUsers%5CBerlin%5CDesktop%5Csssq-main%5Csssq-main%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CBerlin%5CDesktop%5Csssq-main%5Csssq-main&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadmin%2Factivities%2Froute&page=%2Fapi%2Fadmin%2Factivities%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Factivities%2Froute.ts&appDir=C%3A%5CUsers%5CBerlin%5CDesktop%5Csssq-main%5Csssq-main%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CBerlin%5CDesktop%5Csssq-main%5Csssq-main&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_Berlin_Desktop_sssq_main_sssq_main_app_api_admin_activities_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/admin/activities/route.ts */ \"(rsc)/./app/api/admin/activities/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/admin/activities/route\",\n        pathname: \"/api/admin/activities\",\n        filename: \"route\",\n        bundlePath: \"app/api/admin/activities/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\Berlin\\\\Desktop\\\\sssq-main\\\\sssq-main\\\\app\\\\api\\\\admin\\\\activities\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Berlin_Desktop_sssq_main_sssq_main_app_api_admin_activities_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/admin/activities/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhZG1pbiUyRmFjdGl2aXRpZXMlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmFkbWluJTJGYWN0aXZpdGllcyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmFkbWluJTJGYWN0aXZpdGllcyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNCZXJsaW4lNUNEZXNrdG9wJTVDc3NzcS1tYWluJTVDc3NzcS1tYWluJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNCZXJsaW4lNUNEZXNrdG9wJTVDc3NzcS1tYWluJTVDc3NzcS1tYWluJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUN1QztBQUNwSDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZW1pdW0tY2hvaWNlLXJlYWwtZXN0YXRlLz85YWJjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkM6XFxcXFVzZXJzXFxcXEJlcmxpblxcXFxEZXNrdG9wXFxcXHNzc3EtbWFpblxcXFxzc3NxLW1haW5cXFxcYXBwXFxcXGFwaVxcXFxhZG1pblxcXFxhY3Rpdml0aWVzXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9hZG1pbi9hY3Rpdml0aWVzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYWRtaW4vYWN0aXZpdGllc1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvYWRtaW4vYWN0aXZpdGllcy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXEJlcmxpblxcXFxEZXNrdG9wXFxcXHNzc3EtbWFpblxcXFxzc3NxLW1haW5cXFxcYXBwXFxcXGFwaVxcXFxhZG1pblxcXFxhY3Rpdml0aWVzXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9hZG1pbi9hY3Rpdml0aWVzL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadmin%2Factivities%2Froute&page=%2Fapi%2Fadmin%2Factivities%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Factivities%2Froute.ts&appDir=C%3A%5CUsers%5CBerlin%5CDesktop%5Csssq-main%5Csssq-main%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CBerlin%5CDesktop%5Csssq-main%5Csssq-main&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/admin/activities/route.ts":
/*!*******************************************!*\
  !*** ./app/api/admin/activities/route.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_mysql_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../lib/mysql-database */ \"(rsc)/./lib/mysql-database.ts\");\n\n\nasync function GET(request) {\n    try {\n        console.log(\"\\uD83D\\uDCCA Fetching recent activities...\");\n        // Get query parameters\n        const { searchParams } = new URL(request.url);\n        const limit = parseInt(searchParams.get(\"limit\") || \"10\");\n        const frontendOnly = searchParams.get(\"frontend\") === \"true\";\n        const activities = await _lib_mysql_database__WEBPACK_IMPORTED_MODULE_1__.MySQLDatabase.getRecentActivities(limit, frontendOnly);\n        console.log(`✅ Retrieved ${activities.length} activities (frontend only: ${frontendOnly})`);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: activities,\n            frontendOnly\n        });\n    } catch (error) {\n        console.error(\"❌ Error fetching activities:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            message: \"Failed to fetch activities\",\n            error: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { level, category, message, details } = body;\n        if (!level || !category || !message) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                message: \"Missing required fields: level, category, message\"\n            }, {\n                status: 400\n            });\n        }\n        console.log(\"\\uD83D\\uDCDD Creating new activity log:\", {\n            level,\n            category,\n            message\n        });\n        const activity = await _lib_mysql_database__WEBPACK_IMPORTED_MODULE_1__.MySQLDatabase.createActivity({\n            level,\n            category,\n            message,\n            details: details ? JSON.stringify(details) : null\n        });\n        console.log(\"✅ Activity logged successfully:\", activity.id);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: activity\n        });\n    } catch (error) {\n        console.error(\"❌ Error creating activity:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            message: \"Failed to create activity\",\n            error: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2FkbWluL2FjdGl2aXRpZXMvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF3RDtBQUNPO0FBRXhELGVBQWVFLElBQUlDLE9BQW9CO0lBQzVDLElBQUk7UUFDRkMsUUFBUUMsR0FBRyxDQUFDO1FBRVosdUJBQXVCO1FBQ3ZCLE1BQU0sRUFBRUMsWUFBWSxFQUFFLEdBQUcsSUFBSUMsSUFBSUosUUFBUUssR0FBRztRQUM1QyxNQUFNQyxRQUFRQyxTQUFTSixhQUFhSyxHQUFHLENBQUMsWUFBWTtRQUNwRCxNQUFNQyxlQUFlTixhQUFhSyxHQUFHLENBQUMsZ0JBQWdCO1FBRXRELE1BQU1FLGFBQWEsTUFBTVosOERBQWFBLENBQUNhLG1CQUFtQixDQUFDTCxPQUFPRztRQUVsRVIsUUFBUUMsR0FBRyxDQUFDLENBQUMsWUFBWSxFQUFFUSxXQUFXRSxNQUFNLENBQUMsNEJBQTRCLEVBQUVILGFBQWEsQ0FBQyxDQUFDO1FBRTFGLE9BQU9aLHFEQUFZQSxDQUFDZ0IsSUFBSSxDQUFDO1lBQ3ZCQyxTQUFTO1lBQ1RDLE1BQU1MO1lBQ05EO1FBQ0Y7SUFDRixFQUFFLE9BQU9PLE9BQU87UUFDZGYsUUFBUWUsS0FBSyxDQUFDLGdDQUFnQ0E7UUFDOUMsT0FBT25CLHFEQUFZQSxDQUFDZ0IsSUFBSSxDQUN0QjtZQUNFQyxTQUFTO1lBQ1RHLFNBQVM7WUFDVEQsT0FBT0EsaUJBQWlCRSxRQUFRRixNQUFNQyxPQUFPLEdBQUc7UUFDbEQsR0FDQTtZQUFFRSxRQUFRO1FBQUk7SUFFbEI7QUFDRjtBQUVPLGVBQWVDLEtBQUtwQixPQUFvQjtJQUM3QyxJQUFJO1FBQ0YsTUFBTXFCLE9BQU8sTUFBTXJCLFFBQVFhLElBQUk7UUFDL0IsTUFBTSxFQUFFUyxLQUFLLEVBQUVDLFFBQVEsRUFBRU4sT0FBTyxFQUFFTyxPQUFPLEVBQUUsR0FBR0g7UUFFOUMsSUFBSSxDQUFDQyxTQUFTLENBQUNDLFlBQVksQ0FBQ04sU0FBUztZQUNuQyxPQUFPcEIscURBQVlBLENBQUNnQixJQUFJLENBQ3RCO2dCQUNFQyxTQUFTO2dCQUNURyxTQUFTO1lBQ1gsR0FDQTtnQkFBRUUsUUFBUTtZQUFJO1FBRWxCO1FBRUFsQixRQUFRQyxHQUFHLENBQUMsMkNBQWlDO1lBQUVvQjtZQUFPQztZQUFVTjtRQUFRO1FBRXhFLE1BQU1RLFdBQVcsTUFBTTNCLDhEQUFhQSxDQUFDNEIsY0FBYyxDQUFDO1lBQ2xESjtZQUNBQztZQUNBTjtZQUNBTyxTQUFTQSxVQUFVRyxLQUFLQyxTQUFTLENBQUNKLFdBQVc7UUFDL0M7UUFFQXZCLFFBQVFDLEdBQUcsQ0FBQyxtQ0FBbUN1QixTQUFTSSxFQUFFO1FBRTFELE9BQU9oQyxxREFBWUEsQ0FBQ2dCLElBQUksQ0FBQztZQUN2QkMsU0FBUztZQUNUQyxNQUFNVTtRQUNSO0lBQ0YsRUFBRSxPQUFPVCxPQUFPO1FBQ2RmLFFBQVFlLEtBQUssQ0FBQyw4QkFBOEJBO1FBQzVDLE9BQU9uQixxREFBWUEsQ0FBQ2dCLElBQUksQ0FDdEI7WUFDRUMsU0FBUztZQUNURyxTQUFTO1lBQ1RELE9BQU9BLGlCQUFpQkUsUUFBUUYsTUFBTUMsT0FBTyxHQUFHO1FBQ2xELEdBQ0E7WUFBRUUsUUFBUTtRQUFJO0lBRWxCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVtaXVtLWNob2ljZS1yZWFsLWVzdGF0ZS8uL2FwcC9hcGkvYWRtaW4vYWN0aXZpdGllcy9yb3V0ZS50cz80N2U4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyBNeVNRTERhdGFiYXNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vbGliL215c3FsLWRhdGFiYXNlJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKCfwn5OKIEZldGNoaW5nIHJlY2VudCBhY3Rpdml0aWVzLi4uJyk7XG4gICAgXG4gICAgLy8gR2V0IHF1ZXJ5IHBhcmFtZXRlcnNcbiAgICBjb25zdCB7IHNlYXJjaFBhcmFtcyB9ID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgY29uc3QgbGltaXQgPSBwYXJzZUludChzZWFyY2hQYXJhbXMuZ2V0KCdsaW1pdCcpIHx8ICcxMCcpO1xuICAgIGNvbnN0IGZyb250ZW5kT25seSA9IHNlYXJjaFBhcmFtcy5nZXQoJ2Zyb250ZW5kJykgPT09ICd0cnVlJztcbiAgICBcbiAgICBjb25zdCBhY3Rpdml0aWVzID0gYXdhaXQgTXlTUUxEYXRhYmFzZS5nZXRSZWNlbnRBY3Rpdml0aWVzKGxpbWl0LCBmcm9udGVuZE9ubHkpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKGDinIUgUmV0cmlldmVkICR7YWN0aXZpdGllcy5sZW5ndGh9IGFjdGl2aXRpZXMgKGZyb250ZW5kIG9ubHk6ICR7ZnJvbnRlbmRPbmx5fSlgKTtcbiAgICBcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IGFjdGl2aXRpZXMsXG4gICAgICBmcm9udGVuZE9ubHlcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgZmV0Y2hpbmcgYWN0aXZpdGllczonLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBcbiAgICAgICAgc3VjY2VzczogZmFsc2UsIFxuICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIGZldGNoIGFjdGl2aXRpZXMnLFxuICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcidcbiAgICAgIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xuICAgIGNvbnN0IHsgbGV2ZWwsIGNhdGVnb3J5LCBtZXNzYWdlLCBkZXRhaWxzIH0gPSBib2R5O1xuICAgIFxuICAgIGlmICghbGV2ZWwgfHwgIWNhdGVnb3J5IHx8ICFtZXNzYWdlKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgXG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsIFxuICAgICAgICAgIG1lc3NhZ2U6ICdNaXNzaW5nIHJlcXVpcmVkIGZpZWxkczogbGV2ZWwsIGNhdGVnb3J5LCBtZXNzYWdlJyBcbiAgICAgICAgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICApO1xuICAgIH1cbiAgICBcbiAgICBjb25zb2xlLmxvZygn8J+TnSBDcmVhdGluZyBuZXcgYWN0aXZpdHkgbG9nOicsIHsgbGV2ZWwsIGNhdGVnb3J5LCBtZXNzYWdlIH0pO1xuICAgIFxuICAgIGNvbnN0IGFjdGl2aXR5ID0gYXdhaXQgTXlTUUxEYXRhYmFzZS5jcmVhdGVBY3Rpdml0eSh7XG4gICAgICBsZXZlbCxcbiAgICAgIGNhdGVnb3J5LFxuICAgICAgbWVzc2FnZSxcbiAgICAgIGRldGFpbHM6IGRldGFpbHMgPyBKU09OLnN0cmluZ2lmeShkZXRhaWxzKSA6IG51bGxcbiAgICB9KTtcbiAgICBcbiAgICBjb25zb2xlLmxvZygn4pyFIEFjdGl2aXR5IGxvZ2dlZCBzdWNjZXNzZnVsbHk6JywgYWN0aXZpdHkuaWQpO1xuICAgIFxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YTogYWN0aXZpdHlcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgY3JlYXRpbmcgYWN0aXZpdHk6JywgZXJyb3IpO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLCBcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBjcmVhdGUgYWN0aXZpdHknLFxuICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcidcbiAgICAgIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59Il0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsIk15U1FMRGF0YWJhc2UiLCJHRVQiLCJyZXF1ZXN0IiwiY29uc29sZSIsImxvZyIsInNlYXJjaFBhcmFtcyIsIlVSTCIsInVybCIsImxpbWl0IiwicGFyc2VJbnQiLCJnZXQiLCJmcm9udGVuZE9ubHkiLCJhY3Rpdml0aWVzIiwiZ2V0UmVjZW50QWN0aXZpdGllcyIsImxlbmd0aCIsImpzb24iLCJzdWNjZXNzIiwiZGF0YSIsImVycm9yIiwibWVzc2FnZSIsIkVycm9yIiwic3RhdHVzIiwiUE9TVCIsImJvZHkiLCJsZXZlbCIsImNhdGVnb3J5IiwiZGV0YWlscyIsImFjdGl2aXR5IiwiY3JlYXRlQWN0aXZpdHkiLCJKU09OIiwic3RyaW5naWZ5IiwiaWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/admin/activities/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/mysql-database.ts":
/*!*******************************!*\
  !*** ./lib/mysql-database.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Database: () => (/* binding */ Database),\n/* harmony export */   MySQLDatabase: () => (/* binding */ MySQLDatabase),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getConnection: () => (/* binding */ getConnection),\n/* harmony export */   getDatabase: () => (/* binding */ getDatabase),\n/* harmony export */   query: () => (/* binding */ query)\n/* harmony export */ });\n/* harmony import */ var mysql2_promise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mysql2/promise */ \"(rsc)/./node_modules/mysql2/promise.js\");\n\n// Database configuration with your provided credentials\nconst dbConfig = {\n    host: \"srv1558.hstgr.io\",\n    user: \"u485564989_pcrs\",\n    password: \"Abedyr57..\",\n    database: \"u485564989_pcrs\",\n    port:  true ? Number(\"3306\") : 0,\n    ssl: {\n        rejectUnauthorized: false\n    },\n    // Increased connection limits to prevent timeouts\n    connectionLimit: 10,\n    queueLimit: 20,\n    acquireTimeout: 60000,\n    timeout: 60000,\n    // Connection pool options supported by mysql2\n    enableKeepAlive: true,\n    keepAliveInitialDelay: 0,\n    idleTimeout: 300000,\n    maxIdle: 5,\n    // Additional connection management\n    multipleStatements: false\n};\n// Create connection pool\nconst pool = mysql2_promise__WEBPACK_IMPORTED_MODULE_0__.createPool(dbConfig);\n// Database class with MySQL operations\nclass MySQLDatabase {\n    // Test database connection\n    static async testConnection() {\n        try {\n            const connection = await pool.getConnection();\n            await connection.ping();\n            connection.release();\n            console.log(\"✅ Database connection successful\");\n            return true;\n        } catch (error) {\n            console.error(\"❌ Database connection failed:\", error);\n            return false;\n        }\n    }\n    // Cleanup database connections\n    static async cleanup() {\n        try {\n            await pool.end();\n            console.log(\"✅ Database connections closed\");\n        } catch (error) {\n            console.error(\"❌ Error closing database connections:\", error);\n        }\n    }\n    // Generic query execution method\n    static async executeQuery(query, params = []) {\n        try {\n            const connection = await pool.getConnection();\n            const [result] = await connection.execute(query, params);\n            connection.release();\n            return result;\n        } catch (error) {\n            console.error(\"Error executing query:\", error);\n            throw error;\n        }\n    }\n    // Query method for backward compatibility\n    static async query(sql, params = []) {\n        return this.executeQuery(sql, params);\n    }\n    // Initialize database connection and tables\n    static async initialize() {\n        try {\n            // Test connection first\n            const isConnected = await this.testConnection();\n            if (!isConnected) {\n                throw new Error(\"Database connection failed\");\n            }\n            // Initialize tables\n            return await this.initializeTables();\n        } catch (error) {\n            console.error(\"❌ Failed to initialize database:\", error);\n            return false;\n        }\n    }\n    // Add missing columns to site_settings table\n    static async addMissingSocialColumns() {\n        try {\n            const connection = await pool.getConnection();\n            // Check if columns exist and add them if they don't\n            const alterTableSQL = `\n        ALTER TABLE site_settings \n        ADD COLUMN IF NOT EXISTS social_tiktok VARCHAR(500),\n        ADD COLUMN IF NOT EXISTS social_snapchat VARCHAR(500),\n        ADD COLUMN IF NOT EXISTS social_telegram VARCHAR(500),\n        ADD COLUMN IF NOT EXISTS social_whatsapp VARCHAR(500);\n      `;\n            await connection.execute(alterTableSQL);\n            connection.release();\n            console.log(\"✅ Missing social media columns added successfully\");\n            return true;\n        } catch (error) {\n            console.error(\"❌ Error adding missing columns:\", error);\n            return false;\n        }\n    }\n    // Initialize database tables\n    static async initializeTables() {\n        try {\n            const connection = await pool.getConnection();\n            // Create tables if they don't exist\n            const createTablesSQL = `\n        -- Users table\n        CREATE TABLE IF NOT EXISTS users (\n          id INT AUTO_INCREMENT PRIMARY KEY,\n          email VARCHAR(255) UNIQUE NOT NULL,\n          password_hash VARCHAR(255) NOT NULL,\n          role ENUM('admin', 'editor', 'viewer') DEFAULT 'viewer',\n          name VARCHAR(255) NOT NULL,\n          last_login TIMESTAMP NULL,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          is_active BOOLEAN DEFAULT TRUE\n        );\n\n        -- Developers table\n        CREATE TABLE IF NOT EXISTS developers (\n          id INT AUTO_INCREMENT PRIMARY KEY,\n          name VARCHAR(255) NOT NULL,\n          slug VARCHAR(255) UNIQUE NOT NULL,\n          description TEXT,\n          logo VARCHAR(500),\n          established VARCHAR(50),\n          projects_count INT DEFAULT 0,\n          location VARCHAR(255),\n          website VARCHAR(500),\n          phone VARCHAR(50),\n          email VARCHAR(255),\n          status ENUM('Active', 'Inactive') DEFAULT 'Active',\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n        );\n\n        -- Projects table\n        CREATE TABLE IF NOT EXISTS projects (\n          id INT AUTO_INCREMENT PRIMARY KEY,\n          name VARCHAR(255) NOT NULL,\n          slug VARCHAR(255) UNIQUE NOT NULL,\n          developer VARCHAR(255) NOT NULL,\n          location VARCHAR(255) NOT NULL,\n          price VARCHAR(100) NOT NULL,\n          status ENUM('Available', 'Sold', 'Under Construction') DEFAULT 'Available',\n          bedrooms INT NOT NULL,\n          bathrooms INT NOT NULL,\n          studios INT DEFAULT 0,\n          area VARCHAR(100) NOT NULL,\n          description TEXT,\n          image VARCHAR(500),\n          gallery JSON,\n          coordinates_lat DECIMAL(10, 8),\n          coordinates_lng DECIMAL(11, 8),\n          features JSON,\n          amenities JSON,\n          presentation_file VARCHAR(500),\n          presentation_url VARCHAR(500),\n          presentation_slides JSON,\n          presentation_animations JSON,\n          presentation_effects JSON,\n          media_files JSON,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n        );\n\n        -- Hero sections table\n        CREATE TABLE IF NOT EXISTS hero_sections (\n          id INT AUTO_INCREMENT PRIMARY KEY,\n          page VARCHAR(100) NOT NULL,\n          title VARCHAR(255) NOT NULL,\n          subtitle VARCHAR(255),\n          description TEXT,\n          background_image VARCHAR(500),\n          cta_text VARCHAR(100),\n          cta_link VARCHAR(500),\n          is_active BOOLEAN DEFAULT TRUE,\n          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n        );\n\n        -- Articles table\n        CREATE TABLE IF NOT EXISTS articles (\n          id INT AUTO_INCREMENT PRIMARY KEY,\n          title VARCHAR(255) NOT NULL,\n          slug VARCHAR(255) UNIQUE NOT NULL,\n          content LONGTEXT,\n          excerpt TEXT,\n          featured_image VARCHAR(500),\n          author VARCHAR(255),\n          status ENUM('draft', 'published', 'archived') DEFAULT 'draft',\n          published_at TIMESTAMP NULL,\n          tags JSON,\n          category VARCHAR(100),\n          read_time INT DEFAULT 5,\n          meta_description TEXT,\n          featured BOOLEAN DEFAULT FALSE,\n          views_count INT DEFAULT 0,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n        );\n\n        -- Media files table\n        CREATE TABLE IF NOT EXISTS media_files (\n          id INT AUTO_INCREMENT PRIMARY KEY,\n          filename VARCHAR(255) NOT NULL,\n          original_name VARCHAR(255) NOT NULL,\n          file_path VARCHAR(500) NOT NULL,\n          file_size BIGINT NOT NULL,\n          mime_type VARCHAR(100) NOT NULL,\n          alt_text VARCHAR(255),\n          uploaded_by INT,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY (uploaded_by) REFERENCES users(id) ON DELETE SET NULL\n        );\n\n        -- System logs table\n        CREATE TABLE IF NOT EXISTS system_logs (\n          id INT AUTO_INCREMENT PRIMARY KEY,\n          timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          level ENUM('info', 'warning', 'error', 'success') NOT NULL,\n          category VARCHAR(100) NOT NULL,\n          message TEXT NOT NULL,\n          user_id INT,\n          ip_address VARCHAR(45),\n          user_agent TEXT,\n          details JSON,\n          FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL\n        );\n\n        -- Chat messages table\n        CREATE TABLE IF NOT EXISTS chat_messages (\n          id INT AUTO_INCREMENT PRIMARY KEY,\n          session_id VARCHAR(255) NOT NULL,\n          message TEXT NOT NULL,\n          response TEXT NOT NULL,\n          timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          response_time INT NOT NULL,\n          user_ip VARCHAR(45)\n        );\n\n        -- Presentation slides table\n        CREATE TABLE IF NOT EXISTS presentation_slides (\n          id INT AUTO_INCREMENT PRIMARY KEY,\n          project_id INT NOT NULL,\n          slide_number INT NOT NULL,\n          title VARCHAR(255),\n          content TEXT,\n          image_url VARCHAR(500),\n          animation_type VARCHAR(100),\n          duration INT DEFAULT 5000,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE\n        );\n\n        -- Site settings table\n        CREATE TABLE IF NOT EXISTS site_settings (\n          id INT AUTO_INCREMENT PRIMARY KEY,\n          site_title VARCHAR(255) DEFAULT 'Premium Choice',\n          site_description TEXT DEFAULT 'Your trusted partner in Dubai real estate',\n          site_logo VARCHAR(500) DEFAULT '/logo.png',\n          site_favicon VARCHAR(500) DEFAULT '/favicon.ico',\n          contact_email VARCHAR(255) DEFAULT 'admin@example.com',\n    contact_phone VARCHAR(50) DEFAULT NULL,\n    contact_address TEXT DEFAULT 'Dubai, UAE',\n    contact_whatsapp VARCHAR(50) DEFAULT NULL,\n          social_facebook VARCHAR(500),\n          social_instagram VARCHAR(500),\n          social_twitter VARCHAR(500),\n          social_linkedin VARCHAR(500),\n          social_youtube VARCHAR(500),\n          social_tiktok VARCHAR(500),\n          social_snapchat VARCHAR(500),\n          social_telegram VARCHAR(500),\n          social_whatsapp VARCHAR(500),\n          seo_meta_title VARCHAR(255) DEFAULT 'Premium Choice - Dubai Real Estate',\n          seo_meta_description TEXT DEFAULT 'Discover premium real estate opportunities in Dubai with Premium Choice. Your trusted partner for luxury properties and investment solutions.',\n          seo_keywords TEXT DEFAULT 'Dubai real estate, luxury properties, investment, Premium Choice',\n          features_enable_blog BOOLEAN DEFAULT TRUE,\n          features_enable_newsletter BOOLEAN DEFAULT TRUE,\n          features_enable_whatsapp BOOLEAN DEFAULT TRUE,\n          features_enable_live_chat BOOLEAN DEFAULT FALSE,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n        );\n\n        -- Project media table for enhanced media management\n        CREATE TABLE IF NOT EXISTS project_media (\n          id INT AUTO_INCREMENT PRIMARY KEY,\n          project_id INT NOT NULL,\n          file_name VARCHAR(255) NOT NULL,\n          file_path VARCHAR(500) NOT NULL,\n          file_size BIGINT NOT NULL,\n          media_type ENUM('image', 'video', 'animation', 'pdf', 'pptx') NOT NULL,\n          file_extension VARCHAR(10) NOT NULL,\n          upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE\n        );\n\n        -- Hero images table for landing page carousel\n        CREATE TABLE IF NOT EXISTS hero_images (\n          id INT AUTO_INCREMENT PRIMARY KEY,\n          url VARCHAR(500) NOT NULL,\n          title VARCHAR(255) NOT NULL,\n          description TEXT,\n          alt_text VARCHAR(255),\n          is_active BOOLEAN DEFAULT TRUE,\n          order_index INT DEFAULT 0,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n          INDEX idx_active_order (is_active, order_index)\n        );\n\n        -- AI API settings table for AI integration control\n        CREATE TABLE IF NOT EXISTS ai_api_settings (\n          id INT AUTO_INCREMENT PRIMARY KEY,\n          openai_api_key VARCHAR(255),\n          openai_model VARCHAR(100) DEFAULT 'gpt-3.5-turbo',\n          openai_max_tokens INT DEFAULT 1000,\n          openai_temperature DECIMAL(3,2) DEFAULT 0.70,\n          google_api_key VARCHAR(255),\n          google_model VARCHAR(100) DEFAULT 'gemini-pro',\n          google_max_tokens INT DEFAULT 1000,\n          google_temperature DECIMAL(3,2) DEFAULT 0.70,\n          anthropic_api_key VARCHAR(255),\n          anthropic_model VARCHAR(100) DEFAULT 'claude-3-sonnet-20240229',\n          anthropic_max_tokens INT DEFAULT 1000,\n          anthropic_temperature DECIMAL(3,2) DEFAULT 0.70,\n          default_provider ENUM('openai', 'google', 'anthropic') DEFAULT 'openai',\n          ai_enabled BOOLEAN DEFAULT TRUE,\n          rate_limit_per_minute INT DEFAULT 10,\n          rate_limit_per_hour INT DEFAULT 100,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n        );\n      `;\n            await connection.execute(createTablesSQL);\n            connection.release();\n            console.log(\"✅ Database tables initialized successfully\");\n            return true;\n        } catch (error) {\n            console.error(\"❌ Failed to initialize tables:\", error);\n            return false;\n        }\n    }\n    // Insert default admin user\n    static async createDefaultAdmin() {\n        try {\n            const connection = await pool.getConnection();\n            // Check if admin user already exists\n            const [existingUsers] = await connection.execute('SELECT id FROM users WHERE role = \"admin\"');\n            if (existingUsers.length === 0) {\n                // Create default admin user with your credentials\n                await connection.execute(`INSERT INTO users (email, password_hash, role, name, is_active) \n           VALUES (?, ?, 'admin', 'Admin', TRUE)`, [\n                    \"admin@example.com\",\n                    \"Abedyr57..\"\n                ] // In production, hash this password and change email\n                );\n                console.log(\"✅ Default admin user created\");\n            } else {\n                console.log(\"ℹ️ Admin user already exists\");\n            }\n            connection.release();\n            return true;\n        } catch (error) {\n            console.error(\"❌ Failed to create admin user:\", error);\n            return false;\n        }\n    }\n    // Update articles table with missing columns\n    static async updateArticlesTable() {\n        try {\n            const connection = await pool.getConnection();\n            // Check if columns exist and add them if they don't\n            const columnsToAdd = [\n                {\n                    name: \"tags\",\n                    definition: \"JSON\"\n                },\n                {\n                    name: \"category\",\n                    definition: \"VARCHAR(100)\"\n                },\n                {\n                    name: \"read_time\",\n                    definition: \"INT DEFAULT 5\"\n                },\n                {\n                    name: \"meta_description\",\n                    definition: \"TEXT\"\n                },\n                {\n                    name: \"featured\",\n                    definition: \"BOOLEAN DEFAULT FALSE\"\n                },\n                {\n                    name: \"views_count\",\n                    definition: \"INT DEFAULT 0\"\n                }\n            ];\n            for (const column of columnsToAdd){\n                try {\n                    // Check if column exists\n                    const [rows] = await connection.execute(`SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS \n             WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'articles' AND COLUMN_NAME = ?`, [\n                        column.name\n                    ]);\n                    if (rows.length === 0) {\n                        // Column doesn't exist, add it\n                        await connection.execute(`ALTER TABLE articles ADD COLUMN ${column.name} ${column.definition}`);\n                        console.log(`✅ Added column '${column.name}' to articles table`);\n                    } else {\n                        console.log(`ℹ️ Column '${column.name}' already exists in articles table`);\n                    }\n                } catch (error) {\n                    console.error(`❌ Failed to add column '${column.name}':`, error);\n                }\n            }\n            connection.release();\n            return true;\n        } catch (error) {\n            console.error(\"❌ Failed to update articles table:\", error);\n            return false;\n        }\n    }\n    // Projects CRUD operations\n    static async getProjects() {\n        let connection;\n        try {\n            console.log(\"\\uD83D\\uDD17 Attempting to get database connection...\");\n            connection = await pool.getConnection();\n            console.log(\"✅ Database connection acquired\");\n            const [rows] = await connection.execute(\"SELECT * FROM projects ORDER BY created_at DESC\");\n            console.log(`📊 Retrieved ${rows.length} projects from database`);\n            // Parse JSON fields for each project\n            const parseJsonField = (field)=>{\n                if (!field) return null;\n                if (typeof field === \"string\") {\n                    try {\n                        return JSON.parse(field);\n                    } catch  {\n                        return field.split(\",\").map((item)=>item.trim()).filter(Boolean);\n                    }\n                }\n                return field;\n            };\n            const projects = rows.map((project)=>({\n                    ...project,\n                    gallery: parseJsonField(project.gallery),\n                    features: parseJsonField(project.features),\n                    amenities: parseJsonField(project.amenities),\n                    property_types: parseJsonField(project.property_types),\n                    sub_projects: parseJsonField(project.sub_projects),\n                    media_files: parseJsonField(project.media_files),\n                    units: parseJsonField(project.units),\n                    property_type: parseJsonField(project.property_type)\n                }));\n            console.log(\"✅ Projects parsed successfully\");\n            return projects;\n        } catch (error) {\n            console.error(\"❌ Error fetching projects:\", error);\n            if (error instanceof Error && error.message.includes(\"max_user_connections\")) {\n                console.error(\"\\uD83D\\uDEAB Database connection limit exceeded. Consider reducing concurrent connections.\");\n            }\n            return [];\n        } finally{\n            if (connection) {\n                try {\n                    connection.release();\n                    console.log(\"\\uD83D\\uDD13 Database connection released\");\n                } catch (releaseError) {\n                    console.error(\"⚠️ Error releasing connection:\", releaseError);\n                }\n            }\n        }\n    }\n    static async getProjectsByDeveloper(developerName) {\n        try {\n            const connection = await pool.getConnection();\n            const [rows] = await connection.execute(\"SELECT * FROM projects WHERE developer = ? ORDER BY created_at DESC\", [\n                developerName\n            ]);\n            connection.release();\n            // Parse JSON fields for each project\n            const parseJsonField = (field)=>{\n                if (!field) return null;\n                if (typeof field === \"string\") {\n                    try {\n                        return JSON.parse(field);\n                    } catch  {\n                        return field.split(\",\").map((item)=>item.trim()).filter(Boolean);\n                    }\n                }\n                return field;\n            };\n            return rows.map((project)=>({\n                    ...project,\n                    gallery: parseJsonField(project.gallery),\n                    features: parseJsonField(project.features),\n                    amenities: parseJsonField(project.amenities),\n                    property_types: parseJsonField(project.property_types),\n                    sub_projects: parseJsonField(project.sub_projects),\n                    media_files: parseJsonField(project.media_files),\n                    units: parseJsonField(project.units),\n                    property_type: parseJsonField(project.property_type)\n                }));\n        } catch (error) {\n            console.error(\"Error fetching projects by developer:\", error);\n            return [];\n        }\n    }\n    static async getProjectBySlug(slug) {\n        try {\n            const connection = await pool.getConnection();\n            // Get project data\n            const [projectRows] = await connection.execute(\"SELECT * FROM projects WHERE slug = ?\", [\n                slug\n            ]);\n            const projects = projectRows;\n            if (projects.length === 0) {\n                connection.release();\n                return null;\n            }\n            const project = projects[0];\n            // Get presentation slides for this project\n            const [slideRows] = await connection.execute(\"SELECT * FROM presentation_slides WHERE project_id = ? ORDER BY slide_number ASC\", [\n                project.id\n            ]);\n            connection.release();\n            // Parse JSON fields and add presentation slides\n            const parseJsonField = (field)=>{\n                if (!field) return null;\n                if (typeof field === \"string\") {\n                    try {\n                        return JSON.parse(field);\n                    } catch  {\n                        return field.split(\",\").map((item)=>item.trim()).filter(Boolean);\n                    }\n                }\n                return field;\n            };\n            // Parse color palette safely\n            const parseColorPalette = (colorPalette)=>{\n                if (!colorPalette) return null;\n                if (typeof colorPalette === \"string\") {\n                    try {\n                        return JSON.parse(colorPalette);\n                    } catch  {\n                        return null;\n                    }\n                }\n                return colorPalette;\n            };\n            return {\n                ...project,\n                gallery: parseJsonField(project.gallery),\n                features: parseJsonField(project.features),\n                amenities: parseJsonField(project.amenities),\n                property_types: parseJsonField(project.property_types),\n                sub_projects: parseJsonField(project.sub_projects),\n                media_files: parseJsonField(project.media_files),\n                presentation_slides: slideRows\n            };\n        } catch (error) {\n            console.error(\"Error fetching project by slug:\", error);\n            return null;\n        }\n    }\n    static async createProject(project) {\n        let connection;\n        try {\n            // Validate required fields\n            if (!project.name || project.name.trim() === \"\") {\n                throw new Error(\"Project name is required\");\n            }\n            if (!project.description || project.description.trim() === \"\") {\n                throw new Error(\"Project description is required\");\n            }\n            console.log(\"\\uD83D\\uDD17 Getting database connection for project creation...\");\n            connection = await pool.getConnection();\n            console.log(\"✅ Database connection acquired for project creation\");\n            // Helper function to convert undefined to null\n            const toNullIfUndefined = (value)=>value === undefined ? null : value;\n            // Ensure slug is unique by adding timestamp if needed\n            let finalSlug = project.slug || \"\";\n            // Always check if slug already exists and make it unique\n            const [existingRows] = await connection.execute(\"SELECT id FROM projects WHERE slug = ?\", [\n                finalSlug\n            ]);\n            if (existingRows.length > 0) {\n                finalSlug = `${finalSlug}-${Date.now()}`;\n            }\n            const [result] = await connection.execute(`INSERT INTO projects (name, slug, developer, developer_id, location, price, status, bedrooms, bathrooms, area, \n         description, image, gallery, coordinates_lat, coordinates_lng, features, amenities,\n         presentation_file, presentation_url, presentation_slides, presentation_animations, presentation_effects, \n         featured_video, studios, media_files)\n         VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`, [\n                project.name || \"\",\n                finalSlug,\n                project.developer || \"\",\n                project.developer_id || null,\n                project.location || \"\",\n                project.price || \"Price on Request\",\n                project.status || \"Available\",\n                project.bedrooms || 0,\n                project.bathrooms || 0,\n                project.area || \"\",\n                project.description || \"\",\n                project.image || \"\",\n                JSON.stringify(project.gallery || []),\n                project.coordinates_lat || 0,\n                project.coordinates_lng || 0,\n                JSON.stringify(project.features || []),\n                JSON.stringify(project.amenities || []),\n                toNullIfUndefined(project.presentation_file),\n                toNullIfUndefined(project.presentation_url),\n                JSON.stringify(project.presentation_slides || {}),\n                JSON.stringify(project.presentation_animations || {}),\n                JSON.stringify(project.presentation_effects || {}),\n                toNullIfUndefined(project.featured_video),\n                project.studios || 0,\n                JSON.stringify(project.media_files || [])\n            ]);\n            const insertId = result.insertId;\n            // Update developer project count automatically\n            if (project.developer_id) {\n                // Get developer name by ID for the count update\n                const [devRows] = await connection.execute(\"SELECT name FROM developers WHERE id = ?\", [\n                    project.developer_id\n                ]);\n                if (devRows.length > 0) {\n                    await this.updateDeveloperProjectCount(devRows[0].name);\n                }\n            } else if (project.developer) {\n                await this.updateDeveloperProjectCount(project.developer);\n            }\n            connection.release();\n            // Log the activity\n            try {\n                await this.createActivity({\n                    level: \"success\",\n                    category: \"project\",\n                    message: `Created new project \"${project.name}\" by ${project.developer || \"Unknown Developer\"}`,\n                    details: null\n                });\n            } catch (logError) {\n                console.error(\"Failed to log project creation activity:\", logError);\n            }\n            return await this.getProjectById(insertId);\n        } catch (error) {\n            if (connection) {\n                connection.release();\n            }\n            console.error(\"Error creating project:\", error);\n            // Check for specific MySQL errors\n            if (error.code === \"ER_DUP_ENTRY\") {\n                if (error.message.includes(\"name\")) {\n                    throw new Error(\"A project with this name already exists. Please choose a different name.\");\n                } else if (error.message.includes(\"slug\")) {\n                    throw new Error(\"A project with this URL slug already exists. Please modify the project name.\");\n                } else {\n                    throw new Error(\"A project with these details already exists. Please check for duplicates.\");\n                }\n            } else if (error.code === \"ER_DATA_TOO_LONG\") {\n                throw new Error(\"One or more fields contain too much data. Please shorten your input.\");\n            } else if (error.code === \"ER_BAD_NULL_ERROR\") {\n                throw new Error(\"Required field is missing. Please fill in all required fields.\");\n            } else if (error.message.includes(\"required\")) {\n                // Our custom validation errors\n                throw error;\n            } else {\n                throw new Error(\"Database error occurred while creating the project. Please try again.\");\n            }\n        }\n    }\n    static async getProjectById(id) {\n        let connection;\n        try {\n            connection = await pool.getConnection();\n            const [rows] = await connection.execute(\"SELECT * FROM projects WHERE id = ?\", [\n                id\n            ]);\n            const projects = rows;\n            if (projects.length === 0) {\n                return null;\n            }\n            const project = projects[0];\n            // Parse JSON fields\n            const parseJsonField = (field)=>{\n                if (!field) return null;\n                if (typeof field === \"string\") {\n                    try {\n                        return JSON.parse(field);\n                    } catch  {\n                        return field.split(\",\").map((item)=>item.trim()).filter(Boolean);\n                    }\n                }\n                return field;\n            };\n            return {\n                ...project,\n                gallery: parseJsonField(project.gallery),\n                features: parseJsonField(project.features),\n                amenities: parseJsonField(project.amenities),\n                property_types: parseJsonField(project.property_types),\n                sub_projects: parseJsonField(project.sub_projects),\n                media_files: parseJsonField(project.media_files),\n                units: parseJsonField(project.units),\n                property_type: parseJsonField(project.property_type)\n            };\n        } catch (error) {\n            console.error(\"Error fetching project by ID:\", error);\n            throw error; // Re-throw to let API handle the error properly\n        } finally{\n            if (connection) {\n                connection.release();\n            }\n        }\n    }\n    static async updateProject(id, updateData) {\n        try {\n            const connection = await pool.getConnection();\n            // Get the current project data to check if developer is changing\n            const [currentRows] = await connection.execute(\"SELECT developer FROM projects WHERE id = ?\", [\n                id\n            ]);\n            const currentProject = currentRows[0];\n            const oldDeveloper = currentProject?.developer;\n            // Build dynamic update query\n            const fields = Object.keys(updateData).filter((key)=>key !== \"id\");\n            const setClause = fields.map((field)=>`${field} = ?`).join(\", \");\n            const values = fields.map((field)=>{\n                const value = updateData[field];\n                return typeof value === \"object\" ? JSON.stringify(value) : value;\n            });\n            await connection.execute(`UPDATE projects SET ${setClause}, updated_at = NOW() WHERE id = ?`, [\n                ...values,\n                id\n            ]);\n            // Update project counts if developer changed\n            const newDeveloper = updateData.developer;\n            if (newDeveloper && newDeveloper !== oldDeveloper) {\n                // Update count for old developer\n                if (oldDeveloper) {\n                    await this.updateDeveloperProjectCount(oldDeveloper);\n                }\n                // Update count for new developer\n                await this.updateDeveloperProjectCount(newDeveloper);\n            }\n            connection.release();\n            // Log the activity\n            try {\n                const updatedProject = await this.getProjectById(id);\n                const updatedFields = Object.keys(updateData);\n                const fieldText = updatedFields.length === 1 ? updatedFields[0] : `${updatedFields.length} fields`;\n                await this.createActivity({\n                    level: \"info\",\n                    category: \"project\",\n                    message: `Updated ${fieldText} for project \"${updatedProject?.name || \"Unknown\"}\"`,\n                    details: null\n                });\n            } catch (logError) {\n                console.error(\"Failed to log project update activity:\", logError);\n            }\n            return await this.getProjectById(id);\n        } catch (error) {\n            console.error(\"Error updating project:\", error);\n            return null;\n        }\n    }\n    static async deleteProject(id) {\n        try {\n            const connection = await pool.getConnection();\n            // First check if the project exists and get developer name\n            const [checkRows] = await connection.execute(\"SELECT id, developer FROM projects WHERE id = ?\", [\n                id\n            ]);\n            if (checkRows.length === 0) {\n                connection.release();\n                console.log(`Project with id ${id} not found`);\n                return false;\n            }\n            const projectData = checkRows[0];\n            const developerName = projectData.developer;\n            // Get project name for logging before deletion\n            const [projectRows] = await connection.execute(\"SELECT name FROM projects WHERE id = ?\", [\n                id\n            ]);\n            const projectName = projectRows[0]?.name || \"Unknown\";\n            // Delete the project (CASCADE will handle related records)\n            const [result] = await connection.execute(\"DELETE FROM projects WHERE id = ?\", [\n                id\n            ]);\n            // Update developer project count automatically\n            if (developerName) {\n                await this.updateDeveloperProjectCount(developerName);\n            }\n            connection.release();\n            // Check if any rows were affected\n            const affectedRows = result.affectedRows;\n            console.log(`Delete operation affected ${affectedRows} rows for project id ${id}`);\n            // Log the activity if deletion was successful\n            if (affectedRows > 0) {\n                try {\n                    await this.createActivity({\n                        level: \"warning\",\n                        category: \"project\",\n                        message: `Deleted project \"${projectName}\" by ${developerName || \"Unknown Developer\"}`,\n                        details: null\n                    });\n                } catch (logError) {\n                    console.error(\"Failed to log project deletion activity:\", logError);\n                }\n            }\n            return affectedRows > 0;\n        } catch (error) {\n            console.error(\"Error deleting project:\", error);\n            return false;\n        }\n    }\n    // Developers CRUD operations\n    static async getDevelopers() {\n        try {\n            const connection = await pool.getConnection();\n            const [rows] = await connection.execute(\"SELECT * FROM developers ORDER BY name ASC\");\n            connection.release();\n            return rows;\n        } catch (error) {\n            console.error(\"Error fetching developers:\", error);\n            return [];\n        }\n    }\n    static async createDeveloper(developer) {\n        try {\n            const connection = await pool.getConnection();\n            const [result] = await connection.execute(`INSERT INTO developers (name, slug, description, logo, established, projects_count, \n         location, website, phone, email, status) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`, [\n                developer.name,\n                developer.slug,\n                developer.description,\n                developer.logo,\n                developer.established,\n                developer.projects_count,\n                developer.location,\n                developer.website,\n                developer.phone,\n                developer.email,\n                developer.status\n            ]);\n            const insertId = result.insertId;\n            connection.release();\n            // Log the activity\n            try {\n                await this.createActivity({\n                    level: \"success\",\n                    category: \"developer\",\n                    message: `Added new developer \"${developer.name}\" from ${developer.location || \"Unknown Location\"}`,\n                    details: null\n                });\n            } catch (logError) {\n                console.error(\"Failed to log developer creation activity:\", logError);\n            }\n            return await this.getDeveloperById(insertId);\n        } catch (error) {\n            console.error(\"Error creating developer:\", error);\n            return null;\n        }\n    }\n    static async getDeveloperById(id) {\n        try {\n            const connection = await pool.getConnection();\n            const [rows] = await connection.execute(\"SELECT * FROM developers WHERE id = ?\", [\n                id\n            ]);\n            connection.release();\n            const developers = rows;\n            return developers.length > 0 ? developers[0] : null;\n        } catch (error) {\n            console.error(\"Error fetching developer by ID:\", error);\n            return null;\n        }\n    }\n    static async updateDeveloper(id, updateData) {\n        try {\n            const connection = await pool.getConnection();\n            // Get the current developer name for logging\n            const [currentRows] = await connection.execute(\"SELECT name FROM developers WHERE id = ?\", [\n                id\n            ]);\n            const currentDeveloper = currentRows[0];\n            const developerName = currentDeveloper?.name || \"Unknown Developer\";\n            const fields = Object.keys(updateData).filter((key)=>key !== \"id\");\n            const setClause = fields.map((field)=>`${field} = ?`).join(\", \");\n            const values = fields.map((field)=>updateData[field]);\n            await connection.execute(`UPDATE developers SET ${setClause}, updated_at = NOW() WHERE id = ?`, [\n                ...values,\n                id\n            ]);\n            connection.release();\n            // Log the activity\n            try {\n                await this.createActivity({\n                    level: \"info\",\n                    category: \"developer\",\n                    message: `Developer updated: ${developerName}`,\n                    details: JSON.stringify({\n                        developerId: id,\n                        updatedFields: fields\n                    })\n                });\n            } catch (logError) {\n                console.error(\"Failed to log developer update activity:\", logError);\n            }\n            return await this.getDeveloperById(id);\n        } catch (error) {\n            console.error(\"Error updating developer:\", error);\n            return null;\n        }\n    }\n    static async deleteDeveloper(id) {\n        try {\n            const connection = await pool.getConnection();\n            await connection.execute(\"DELETE FROM developers WHERE id = ?\", [\n                id\n            ]);\n            connection.release();\n            return true;\n        } catch (error) {\n            console.error(\"Error deleting developer:\", error);\n            return false;\n        }\n    }\n    static async updateDeveloperProjectCount(developerName) {\n        try {\n            const connection = await pool.getConnection();\n            // Count projects for this developer\n            const [countRows] = await connection.execute(\"SELECT COUNT(*) as project_count FROM projects WHERE developer = ?\", [\n                developerName\n            ]);\n            const projectCount = countRows[0].project_count;\n            // Update the developer's project count\n            await connection.execute(\"UPDATE developers SET projects_count = ?, updated_at = NOW() WHERE name = ?\", [\n                projectCount,\n                developerName\n            ]);\n            connection.release();\n            console.log(`Updated project count for developer ${developerName}: ${projectCount} projects`);\n        } catch (error) {\n            console.error(\"Error updating developer project count:\", error);\n        }\n    }\n    // Enhanced project-developer relationship methods\n    static async getProjectsByDeveloperId(developerId) {\n        try {\n            const connection = await pool.getConnection();\n            const [rows] = await connection.execute(`SELECT p.*, d.name as developer_name, d.slug as developer_slug \n         FROM projects p \n         LEFT JOIN developers d ON p.developer_id = d.id \n         WHERE p.developer_id = ? \n         ORDER BY p.created_at DESC`, [\n                developerId\n            ]);\n            connection.release();\n            return rows;\n        } catch (error) {\n            console.error(\"Error fetching projects by developer ID:\", error);\n            return [];\n        }\n    }\n    static async getDeveloperWithProjects(developerId) {\n        try {\n            const connection = await pool.getConnection();\n            // Get developer details\n            const [developerRows] = await connection.execute(\"SELECT * FROM developers WHERE id = ?\", [\n                developerId\n            ]);\n            if (developerRows.length === 0) {\n                connection.release();\n                return null;\n            }\n            const developer = developerRows[0];\n            // Get associated projects\n            const [projectRows] = await connection.execute(\"SELECT * FROM projects WHERE developer_id = ? ORDER BY created_at DESC\", [\n                developerId\n            ]);\n            connection.release();\n            return {\n                ...developer,\n                projects: projectRows\n            };\n        } catch (error) {\n            console.error(\"Error fetching developer with projects:\", error);\n            return null;\n        }\n    }\n    static async assignProjectToDeveloper(projectId, developerId) {\n        try {\n            const connection = await pool.getConnection();\n            // Update project with developer_id\n            await connection.execute(\"UPDATE projects SET developer_id = ?, updated_at = NOW() WHERE id = ?\", [\n                developerId,\n                projectId\n            ]);\n            // Update developer's project count\n            await connection.execute(\"UPDATE developers SET projects_count = projects_count + 1, updated_at = NOW() WHERE id = ?\", [\n                developerId\n            ]);\n            connection.release();\n            return true;\n        } catch (error) {\n            console.error(\"Error assigning project to developer:\", error);\n            return false;\n        }\n    }\n    static async unassignProjectFromDeveloper(projectId) {\n        try {\n            const connection = await pool.getConnection();\n            // Get current developer_id before removing\n            const [projectRows] = await connection.execute(\"SELECT developer_id FROM projects WHERE id = ?\", [\n                projectId\n            ]);\n            if (projectRows.length > 0) {\n                const currentDeveloperId = projectRows[0].developer_id;\n                if (currentDeveloperId) {\n                    // Remove developer assignment\n                    await connection.execute(\"UPDATE projects SET developer_id = NULL, updated_at = NOW() WHERE id = ?\", [\n                        projectId\n                    ]);\n                    // Update developer's project count\n                    await connection.execute(\"UPDATE developers SET projects_count = projects_count - 1, updated_at = NOW() WHERE id = ?\", [\n                        currentDeveloperId\n                    ]);\n                }\n            }\n            connection.release();\n            return true;\n        } catch (error) {\n            console.error(\"Error unassigning project from developer:\", error);\n            return false;\n        }\n    }\n    static async deleteDeveloperWithCascade(id) {\n        try {\n            const connection = await pool.getConnection();\n            // Get developer name for logging before deletion\n            const [developerRows] = await connection.execute(\"SELECT name FROM developers WHERE id = ?\", [\n                id\n            ]);\n            const developerName = developerRows[0]?.name || \"Unknown Developer\";\n            // Start transaction\n            await connection.beginTransaction();\n            try {\n                // Count projects that will be deleted\n                const [countRows] = await connection.execute(\"SELECT COUNT(*) as project_count FROM projects WHERE developer_id = ?\", [\n                    id\n                ]);\n                const deletedProjects = countRows[0].project_count;\n                // Delete associated projects (cascading delete)\n                await connection.execute(\"DELETE FROM projects WHERE developer_id = ?\", [\n                    id\n                ]);\n                // Delete the developer\n                await connection.execute(\"DELETE FROM developers WHERE id = ?\", [\n                    id\n                ]);\n                // Commit transaction\n                await connection.commit();\n                connection.release();\n                // Log the activity\n                try {\n                    await this.createActivity({\n                        level: \"warning\",\n                        category: \"developer\",\n                        message: `Developer deleted: ${developerName}`,\n                        details: JSON.stringify({\n                            developerId: id,\n                            deletedProjects\n                        })\n                    });\n                } catch (logError) {\n                    console.error(\"Failed to log developer deletion activity:\", logError);\n                }\n                return {\n                    success: true,\n                    deletedProjects\n                };\n            } catch (error) {\n                // Rollback transaction on error\n                await connection.rollback();\n                connection.release();\n                throw error;\n            }\n        } catch (error) {\n            console.error(\"Error deleting developer with cascade:\", error);\n            return {\n                success: false,\n                deletedProjects: 0\n            };\n        }\n    }\n    static async createProjectWithDeveloper(projectData, developerId) {\n        try {\n            const connection = await pool.getConnection();\n            // Start transaction\n            await connection.beginTransaction();\n            try {\n                // Create the project with developer_id\n                const projectToCreate = {\n                    ...projectData,\n                    developer_id: developerId || null\n                };\n                const [result] = await connection.execute(`INSERT INTO projects (\n            name, slug, project_name, sub_project, display_title, developer, developer_id,\n            location, price, starting_price, status, project_type, type, category,\n            color_palette, property_type, property_types, sub_projects, bedrooms, bathrooms,\n            studios, units_1bedroom, units_2bedroom, units_3bedroom, units_4bedroom,\n            units_5bedroom, units_office, living_rooms, units, area, description, image,\n            gallery, coordinates_lat, coordinates_lng, features, amenities, is_featured,\n            brochure_url, theme_color, voice_over_url, presentation_file, presentation_url,\n            media_type, featured_video, created_at, updated_at\n          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())`, [\n                    projectToCreate.name,\n                    projectToCreate.slug,\n                    projectToCreate.project_name || null,\n                    projectToCreate.sub_project || null,\n                    projectToCreate.display_title || null,\n                    projectToCreate.developer,\n                    projectToCreate.developer_id,\n                    projectToCreate.location,\n                    projectToCreate.price || null,\n                    projectToCreate.starting_price || null,\n                    projectToCreate.status || \"Active\",\n                    projectToCreate.project_type || null,\n                    projectToCreate.type || null,\n                    projectToCreate.category || null,\n                    projectToCreate.color_palette || null,\n                    JSON.stringify(projectToCreate.property_type || []),\n                    JSON.stringify(projectToCreate.property_types || []),\n                    JSON.stringify(projectToCreate.sub_projects || []),\n                    projectToCreate.bedrooms || 0,\n                    projectToCreate.bathrooms || 0,\n                    projectToCreate.studios || 0,\n                    projectToCreate.units_1bedroom || 0,\n                    projectToCreate.units_2bedroom || 0,\n                    projectToCreate.units_3bedroom || 0,\n                    projectToCreate.units_4bedroom || 0,\n                    projectToCreate.units_5bedroom || 0,\n                    projectToCreate.units_office || 0,\n                    projectToCreate.living_rooms || 0,\n                    JSON.stringify(projectToCreate.units || []),\n                    projectToCreate.area,\n                    projectToCreate.description,\n                    projectToCreate.image,\n                    JSON.stringify(projectToCreate.gallery || []),\n                    projectToCreate.coordinates_lat,\n                    projectToCreate.coordinates_lng,\n                    JSON.stringify(projectToCreate.features || []),\n                    JSON.stringify(projectToCreate.amenities || []),\n                    projectToCreate.is_featured || false,\n                    projectToCreate.brochure_url || null,\n                    projectToCreate.theme_color || null,\n                    projectToCreate.voice_over_url || null,\n                    projectToCreate.presentation_file || null,\n                    projectToCreate.presentation_url || null,\n                    projectToCreate.media_type || null,\n                    projectToCreate.featured_video || null\n                ]);\n                const insertId = result.insertId;\n                // Update developer's project count if assigned\n                if (developerId) {\n                    await connection.execute(\"UPDATE developers SET projects_count = projects_count + 1, updated_at = NOW() WHERE id = ?\", [\n                        developerId\n                    ]);\n                }\n                // Commit transaction\n                await connection.commit();\n                // Fetch and return the created project\n                const [projectRows] = await connection.execute(\"SELECT * FROM projects WHERE id = ?\", [\n                    insertId\n                ]);\n                connection.release();\n                if (projectRows.length > 0) {\n                    const project = projectRows[0];\n                    return {\n                        ...project,\n                        property_type: project.property_type ? typeof project.property_type === \"string\" ? JSON.parse(project.property_type) : project.property_type : [],\n                        property_types: project.property_types ? typeof project.property_types === \"string\" ? JSON.parse(project.property_types) : project.property_types : [],\n                        sub_projects: project.sub_projects ? typeof project.sub_projects === \"string\" ? JSON.parse(project.sub_projects) : project.sub_projects : [],\n                        units: project.units ? typeof project.units === \"string\" ? JSON.parse(project.units) : project.units : [],\n                        gallery: project.gallery ? typeof project.gallery === \"string\" ? JSON.parse(project.gallery) : project.gallery : [],\n                        features: project.features ? typeof project.features === \"string\" ? JSON.parse(project.features) : project.features : [],\n                        amenities: project.amenities ? typeof project.amenities === \"string\" ? JSON.parse(project.amenities) : project.amenities : []\n                    };\n                }\n                return null;\n            } catch (error) {\n                // Rollback transaction on error\n                await connection.rollback();\n                connection.release();\n                throw error;\n            }\n        } catch (error) {\n            console.error(\"Error creating project with developer:\", error);\n            return null;\n        }\n    }\n    // Articles CRUD operations\n    static async getArticles() {\n        try {\n            const connection = await pool.getConnection();\n            const [rows] = await connection.execute(\"SELECT * FROM articles ORDER BY created_at DESC\");\n            connection.release();\n            const articles = rows;\n            // Parse JSON tags field and handle missing columns\n            return articles.map((article)=>({\n                    ...article,\n                    tags: article.tags ? typeof article.tags === \"string\" ? JSON.parse(article.tags) : article.tags : [],\n                    category: article.category || \"\",\n                    read_time: article.read_time || 5,\n                    meta_description: article.meta_description || \"\",\n                    featured: article.featured || false,\n                    views_count: article.views_count || 0\n                }));\n        } catch (error) {\n            console.error(\"Error fetching articles:\", error);\n            return [];\n        }\n    }\n    static async createArticle(article) {\n        try {\n            const connection = await pool.getConnection();\n            // First try with all columns\n            try {\n                const [result] = await connection.execute(`INSERT INTO articles (title, slug, content, excerpt, featured_image, author, status, published_at, tags, category, read_time, meta_description, featured, views_count)\n           VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`, [\n                    article.title,\n                    article.slug,\n                    article.content,\n                    article.excerpt,\n                    article.featured_image,\n                    article.author,\n                    article.status,\n                    article.published_at,\n                    JSON.stringify(article.tags || []),\n                    article.category,\n                    article.read_time,\n                    article.meta_description,\n                    article.featured || false,\n                    article.views_count || 0\n                ]);\n                const insertId = result.insertId;\n                connection.release();\n                return await this.getArticleById(insertId);\n            } catch (insertError) {\n                console.log(\"Full insert failed, trying basic insert:\", insertError);\n                // If that fails, try with basic columns only\n                const [result] = await connection.execute(`INSERT INTO articles (title, slug, content, excerpt, featured_image, author, status, published_at)\n           VALUES (?, ?, ?, ?, ?, ?, ?, ?)`, [\n                    article.title,\n                    article.slug,\n                    article.content,\n                    article.excerpt,\n                    article.featured_image,\n                    article.author,\n                    article.status,\n                    article.published_at\n                ]);\n                const insertId = result.insertId;\n                connection.release();\n                return await this.getArticleById(insertId);\n            }\n        } catch (error) {\n            console.error(\"Error creating article:\", error);\n            return null;\n        }\n    }\n    static async getArticleById(id) {\n        try {\n            const connection = await pool.getConnection();\n            const [rows] = await connection.execute(\"SELECT * FROM articles WHERE id = ?\", [\n                id\n            ]);\n            connection.release();\n            const articles = rows;\n            if (articles.length > 0) {\n                const article = articles[0];\n                return {\n                    ...article,\n                    tags: article.tags ? typeof article.tags === \"string\" ? JSON.parse(article.tags) : article.tags : [],\n                    category: article.category || \"\",\n                    read_time: article.read_time || 5,\n                    meta_description: article.meta_description || \"\",\n                    featured: article.featured || false,\n                    views_count: article.views_count || 0\n                };\n            }\n            return null;\n        } catch (error) {\n            console.error(\"Error fetching article by ID:\", error);\n            return null;\n        }\n    }\n    static async updateArticle(id, updateData) {\n        try {\n            const connection = await pool.getConnection();\n            // Convert tags array to JSON string if present\n            const processedData = {\n                ...updateData\n            };\n            if (processedData.tags) {\n                processedData.tags = JSON.stringify(processedData.tags);\n            }\n            const fields = Object.keys(processedData).filter((key)=>key !== \"id\");\n            const setClause = fields.map((field)=>`${field} = ?`).join(\", \");\n            const values = fields.map((field)=>processedData[field]);\n            await connection.execute(`UPDATE articles SET ${setClause}, updated_at = NOW() WHERE id = ?`, [\n                ...values,\n                id\n            ]);\n            connection.release();\n            return await this.getArticleById(id);\n        } catch (error) {\n            console.error(\"Error updating article:\", error);\n            return null;\n        }\n    }\n    static async deleteArticle(id) {\n        try {\n            const connection = await pool.getConnection();\n            await connection.execute(\"DELETE FROM articles WHERE id = ?\", [\n                id\n            ]);\n            connection.release();\n            return true;\n        } catch (error) {\n            console.error(\"Error deleting article:\", error);\n            return false;\n        }\n    }\n    static async getArticleBySlug(slug) {\n        try {\n            const connection = await pool.getConnection();\n            const [rows] = await connection.execute('SELECT * FROM articles WHERE slug = ? AND status = \"published\"', [\n                slug\n            ]);\n            connection.release();\n            const articles = rows;\n            if (articles.length > 0) {\n                const article = articles[0];\n                return {\n                    ...article,\n                    tags: article.tags ? typeof article.tags === \"string\" ? JSON.parse(article.tags) : article.tags : [],\n                    category: article.category || \"\",\n                    read_time: article.read_time || 5,\n                    meta_description: article.meta_description || \"\",\n                    featured: article.featured || false,\n                    views_count: article.views_count || 0\n                };\n            }\n            return null;\n        } catch (error) {\n            console.error(\"Error fetching article by slug:\", error);\n            return null;\n        }\n    }\n    static async getPublishedArticles(options) {\n        try {\n            const connection = await pool.getConnection();\n            let query = 'SELECT * FROM articles WHERE status = \"published\" ORDER BY published_at DESC, created_at DESC';\n            const params = [];\n            if (options?.limit) {\n                query += \" LIMIT ?\";\n                params.push(options.limit);\n            }\n            const [rows] = await connection.execute(query, params);\n            connection.release();\n            const articles = rows;\n            // Parse JSON tags field and handle missing columns\n            return articles.map((article)=>({\n                    ...article,\n                    tags: article.tags ? typeof article.tags === \"string\" ? JSON.parse(article.tags) : article.tags : [],\n                    category: article.category || \"\",\n                    read_time: article.read_time || 5,\n                    meta_description: article.meta_description || \"\",\n                    featured: article.featured || false,\n                    views_count: article.views_count || 0\n                }));\n        } catch (error) {\n            console.error(\"Error fetching published articles:\", error);\n            return [];\n        }\n    }\n    // Media Files CRUD operations\n    static async getMediaFiles() {\n        try {\n            const connection = await pool.getConnection();\n            const [rows] = await connection.execute(\"SELECT * FROM media_files ORDER BY created_at DESC\");\n            connection.release();\n            return rows;\n        } catch (error) {\n            console.error(\"Error fetching media files:\", error);\n            return [];\n        }\n    }\n    static async createMediaFile(mediaData) {\n        try {\n            const connection = await pool.getConnection();\n            const [result] = await connection.execute(`INSERT INTO media_files (filename, original_name, file_path, file_size, mime_type, alt_text, uploaded_by)\n         VALUES (?, ?, ?, ?, ?, ?, ?)`, [\n                mediaData.filename,\n                mediaData.original_name,\n                mediaData.file_path,\n                mediaData.file_size,\n                mediaData.mime_type,\n                mediaData.alt_text,\n                mediaData.uploaded_by\n            ]);\n            const insertId = result.insertId;\n            connection.release();\n            return await this.getMediaFileById(insertId);\n        } catch (error) {\n            console.error(\"Error creating media file:\", error);\n            return null;\n        }\n    }\n    static async getMediaFileById(id) {\n        try {\n            const connection = await pool.getConnection();\n            const [rows] = await connection.execute(\"SELECT * FROM media_files WHERE id = ?\", [\n                id\n            ]);\n            connection.release();\n            const mediaFiles = rows;\n            return mediaFiles.length > 0 ? mediaFiles[0] : null;\n        } catch (error) {\n            console.error(\"Error fetching media file by ID:\", error);\n            return null;\n        }\n    }\n    static async updateMediaFile(id, updateData) {\n        try {\n            const connection = await pool.getConnection();\n            const fields = Object.keys(updateData).filter((key)=>key !== \"id\" && key !== \"created_at\" && updateData[key] !== undefined);\n            if (fields.length === 0) {\n                connection.release();\n                return true;\n            }\n            const setClause = fields.map((field)=>`${field} = ?`).join(\", \");\n            const values = fields.map((field)=>updateData[field]);\n            const [result] = await connection.execute(`UPDATE media_files SET ${setClause} WHERE id = ?`, [\n                ...values,\n                id\n            ]);\n            connection.release();\n            return result.affectedRows > 0;\n        } catch (error) {\n            console.error(\"Error updating media file:\", error);\n            return false;\n        }\n    }\n    static async deleteMediaFile(id) {\n        try {\n            const connection = await pool.getConnection();\n            await connection.execute(\"DELETE FROM media_files WHERE id = ?\", [\n                id\n            ]);\n            connection.release();\n            return true;\n        } catch (error) {\n            console.error(\"Error deleting media file:\", error);\n            return false;\n        }\n    }\n    // Hero Sections CRUD operations\n    static async getHeroSections() {\n        try {\n            const connection = await pool.getConnection();\n            const [rows] = await connection.execute(\"SELECT * FROM hero_sections ORDER BY id DESC\");\n            connection.release();\n            return rows;\n        } catch (error) {\n            console.error(\"Error fetching hero sections:\", error);\n            return [];\n        }\n    }\n    static async createHeroSection(heroData) {\n        try {\n            const connection = await pool.getConnection();\n            const [result] = await connection.execute(`INSERT INTO hero_sections (page, title, subtitle, description, background_image, cta_text, cta_link, is_active)\n         VALUES (?, ?, ?, ?, ?, ?, ?, ?)`, [\n                heroData.page,\n                heroData.title,\n                heroData.subtitle,\n                heroData.description,\n                heroData.background_image,\n                heroData.cta_text,\n                heroData.cta_link,\n                heroData.is_active\n            ]);\n            const insertId = result.insertId;\n            connection.release();\n            return await this.getHeroSectionById(insertId);\n        } catch (error) {\n            console.error(\"Error creating hero section:\", error);\n            return null;\n        }\n    }\n    static async getHeroSectionById(id) {\n        try {\n            const connection = await pool.getConnection();\n            const [rows] = await connection.execute(\"SELECT * FROM hero_sections WHERE id = ?\", [\n                id\n            ]);\n            connection.release();\n            const heroSections = rows;\n            return heroSections.length > 0 ? heroSections[0] : null;\n        } catch (error) {\n            console.error(\"Error fetching hero section by ID:\", error);\n            return null;\n        }\n    }\n    static async updateHeroSection(id, updateData) {\n        try {\n            const connection = await pool.getConnection();\n            const fields = Object.keys(updateData).filter((key)=>key !== \"id\");\n            const setClause = fields.map((field)=>`${field} = ?`).join(\", \");\n            const values = fields.map((field)=>updateData[field]);\n            await connection.execute(`UPDATE hero_sections SET ${setClause}, updated_at = NOW() WHERE id = ?`, [\n                ...values,\n                id\n            ]);\n            connection.release();\n            return await this.getHeroSectionById(id);\n        } catch (error) {\n            console.error(\"Error updating hero section:\", error);\n            return null;\n        }\n    }\n    static async deleteHeroSection(id) {\n        try {\n            const connection = await pool.getConnection();\n            await connection.execute(\"DELETE FROM hero_sections WHERE id = ?\", [\n                id\n            ]);\n            connection.release();\n            return true;\n        } catch (error) {\n            console.error(\"Error deleting hero section:\", error);\n            return false;\n        }\n    }\n    // Users authentication\n    static async getUserByEmail(email) {\n        try {\n            const connection = await pool.getConnection();\n            const [rows] = await connection.execute(\"SELECT * FROM users WHERE email = ? AND is_active = TRUE\", [\n                email\n            ]);\n            connection.release();\n            const users = rows;\n            return users.length > 0 ? users[0] : null;\n        } catch (error) {\n            console.error(\"Error fetching user by email:\", error);\n            return null;\n        }\n    }\n    static async updateUserLastLogin(userId) {\n        try {\n            const connection = await pool.getConnection();\n            await connection.execute(\"UPDATE users SET last_login = NOW() WHERE id = ?\", [\n                userId\n            ]);\n            connection.release();\n            return true;\n        } catch (error) {\n            console.error(\"Error updating user last login:\", error);\n            return false;\n        }\n    }\n    // System logs\n    static async createLog(logData) {\n        try {\n            const connection = await pool.getConnection();\n            await connection.execute(`INSERT INTO system_logs (level, category, message, user_id, ip_address, user_agent, details)\n         VALUES (?, ?, ?, ?, ?, ?, ?)`, [\n                logData.level,\n                logData.category,\n                logData.message,\n                logData.user_id,\n                logData.ip_address,\n                logData.user_agent,\n                JSON.stringify(logData.details || {})\n            ]);\n            connection.release();\n            return true;\n        } catch (error) {\n            console.error(\"Error creating log:\", error);\n            return false;\n        }\n    }\n    // Get system statistics\n    static async getSystemStats() {\n        try {\n            const connection = await pool.getConnection();\n            const [projectCount] = await connection.execute(\"SELECT COUNT(*) as count FROM projects\");\n            const [developerCount] = await connection.execute(\"SELECT COUNT(*) as count FROM developers\");\n            const [userCount] = await connection.execute(\"SELECT COUNT(*) as count FROM users\");\n            const [logCount] = await connection.execute(\"SELECT COUNT(*) as count FROM system_logs\");\n            connection.release();\n            return {\n                totalProjects: projectCount[0].count,\n                totalDevelopers: developerCount[0].count,\n                totalUsers: userCount[0].count,\n                totalLogs: logCount[0].count,\n                lastBackup: new Date()\n            };\n        } catch (error) {\n            console.error(\"Error fetching system stats:\", error);\n            return {\n                totalProjects: 0,\n                totalDevelopers: 0,\n                totalUsers: 0,\n                totalLogs: 0,\n                lastBackup: new Date()\n            };\n        }\n    }\n    // Settings management\n    static async getSettings() {\n        try {\n            const connection = await pool.getConnection();\n            const [rows] = await connection.execute(\"SELECT * FROM site_settings ORDER BY id DESC LIMIT 1\");\n            connection.release();\n            const settings = rows;\n            if (settings.length > 0) {\n                const dbSettings = settings[0];\n                // Transform database columns to API format\n                return {\n                    site: {\n                        title: dbSettings.site_title || \"Premium Choice\",\n                        description: dbSettings.site_description || \"Your trusted partner in Dubai real estate\",\n                        logo: dbSettings.site_logo || \"/logo.png\",\n                        favicon: dbSettings.site_favicon || \"/favicon.ico\"\n                    },\n                    contact: {\n                        email: dbSettings.contact_email || \"admin@example.com\",\n                        phone: dbSettings.contact_phone || null,\n                        address: dbSettings.contact_address || \"Dubai, UAE\",\n                        whatsapp: dbSettings.contact_whatsapp || dbSettings.whatsapp_phone || null\n                    },\n                    social: {\n                        facebook: dbSettings.social_facebook || \"\",\n                        instagram: dbSettings.social_instagram || \"\",\n                        twitter: dbSettings.social_twitter || \"\",\n                        linkedin: dbSettings.social_linkedin || \"\",\n                        youtube: dbSettings.social_youtube || \"\",\n                        tiktok: dbSettings.social_tiktok || \"\",\n                        snapchat: dbSettings.social_snapchat || \"\",\n                        telegram: dbSettings.social_telegram || \"\",\n                        whatsapp: dbSettings.social_whatsapp || \"\"\n                    },\n                    seo: {\n                        metaTitle: dbSettings.seo_meta_title || \"Premium Choice - Dubai Real Estate\",\n                        metaDescription: dbSettings.seo_meta_description || \"Discover premium real estate opportunities in Dubai with Premium Choice. Your trusted partner for luxury properties and investment solutions.\",\n                        keywords: dbSettings.seo_keywords || \"Dubai real estate, luxury properties, investment, Premium Choice\"\n                    },\n                    features: {\n                        enableBlog: dbSettings.features_enable_blog !== false,\n                        enableNewsletter: dbSettings.features_enable_newsletter !== false,\n                        enableWhatsApp: dbSettings.features_enable_whatsapp !== false,\n                        enableLiveChat: dbSettings.features_enable_live_chat === true\n                    },\n                    whatsapp: {\n                        phone: dbSettings.whatsapp_phone || dbSettings.contact_whatsapp || null,\n                        enabled: dbSettings.whatsapp_enabled !== false,\n                        defaultMessage: dbSettings.whatsapp_default_message || \"Hello! I'm interested in your real estate services.\",\n                        businessHours: dbSettings.whatsapp_business_hours ? JSON.parse(dbSettings.whatsapp_business_hours) : null,\n                        autoReply: dbSettings.whatsapp_auto_reply || null,\n                        showOnPages: dbSettings.whatsapp_show_on_pages ? JSON.parse(dbSettings.whatsapp_show_on_pages) : [\n                            \"home\",\n                            \"projects\",\n                            \"contact\"\n                        ]\n                    }\n                };\n            } else {\n                // Return default settings if none exist\n                return {\n                    site: {\n                        title: \"Premium Choice\",\n                        description: \"Your trusted partner in Dubai real estate\",\n                        logo: \"/logo.png\",\n                        favicon: \"/favicon.ico\"\n                    },\n                    contact: {\n                        email: \"admin@example.com\",\n                        phone: null,\n                        address: \"Dubai, UAE\",\n                        whatsapp: null\n                    },\n                    social: {\n                        facebook: \"\",\n                        instagram: \"\",\n                        twitter: \"\",\n                        linkedin: \"\",\n                        youtube: \"\",\n                        tiktok: \"\",\n                        snapchat: \"\",\n                        telegram: \"\",\n                        whatsapp: \"\"\n                    },\n                    seo: {\n                        metaTitle: \"Premium Choice - Dubai Real Estate\",\n                        metaDescription: \"Discover premium real estate opportunities in Dubai with Premium Choice. Your trusted partner for luxury properties and investment solutions.\",\n                        keywords: \"Dubai real estate, luxury properties, investment, Premium Choice\"\n                    },\n                    features: {\n                        enableBlog: true,\n                        enableNewsletter: true,\n                        enableWhatsApp: true,\n                        enableLiveChat: false\n                    },\n                    whatsapp: {\n                        phone: null,\n                        enabled: true,\n                        defaultMessage: \"Hello! I'm interested in your real estate services.\",\n                        businessHours: null,\n                        autoReply: null,\n                        showOnPages: [\n                            \"home\",\n                            \"projects\",\n                            \"contact\"\n                        ]\n                    }\n                };\n            }\n        } catch (error) {\n            console.error(\"Error fetching settings:\", error);\n            // Return default settings on error\n            return {\n                site: {\n                    title: \"Premium Choice\",\n                    description: \"Your trusted partner in Dubai real estate\",\n                    logo: \"/logo.png\",\n                    favicon: \"/favicon.ico\"\n                },\n                contact: {\n                    email: \"admin@example.com\",\n                    phone: null,\n                    address: \"Dubai, UAE\",\n                    whatsapp: null\n                },\n                social: {\n                    facebook: \"\",\n                    instagram: \"\",\n                    twitter: \"\",\n                    linkedin: \"\",\n                    youtube: \"\",\n                    tiktok: \"\",\n                    snapchat: \"\",\n                    telegram: \"\",\n                    whatsapp: \"\"\n                },\n                seo: {\n                    metaTitle: \"Premium Choice - Dubai Real Estate\",\n                    metaDescription: \"Discover premium real estate opportunities in Dubai with Premium Choice. Your trusted partner for luxury properties and investment solutions.\",\n                    keywords: \"Dubai real estate, luxury properties, investment, Premium Choice\"\n                },\n                features: {\n                    enableBlog: true,\n                    enableNewsletter: true,\n                    enableWhatsApp: true,\n                    enableLiveChat: false\n                },\n                whatsapp: {\n                    phone: null,\n                    enabled: true,\n                    defaultMessage: \"Hello! I'm interested in your real estate services.\",\n                    businessHours: null,\n                    autoReply: null,\n                    showOnPages: [\n                        \"home\",\n                        \"projects\",\n                        \"contact\"\n                    ]\n                }\n            };\n        }\n    }\n    static async updateSettings(settingsData) {\n        try {\n            const connection = await pool.getConnection();\n            // Transform API format to database columns\n            const dbData = {};\n            if (settingsData.site) {\n                if (settingsData.site.title) dbData.site_title = settingsData.site.title;\n                if (settingsData.site.description) dbData.site_description = settingsData.site.description;\n                if (settingsData.site.logo) dbData.site_logo = settingsData.site.logo;\n                if (settingsData.site.favicon) dbData.site_favicon = settingsData.site.favicon;\n            }\n            if (settingsData.contact) {\n                if (settingsData.contact.email) dbData.contact_email = settingsData.contact.email;\n                if (settingsData.contact.phone) dbData.contact_phone = settingsData.contact.phone;\n                if (settingsData.contact.address) dbData.contact_address = settingsData.contact.address;\n                if (settingsData.contact.whatsapp) dbData.contact_whatsapp = settingsData.contact.whatsapp;\n            }\n            if (settingsData.social) {\n                if (settingsData.social.facebook !== undefined) dbData.social_facebook = settingsData.social.facebook;\n                if (settingsData.social.instagram !== undefined) dbData.social_instagram = settingsData.social.instagram;\n                if (settingsData.social.twitter !== undefined) dbData.social_twitter = settingsData.social.twitter;\n                if (settingsData.social.linkedin !== undefined) dbData.social_linkedin = settingsData.social.linkedin;\n                if (settingsData.social.youtube !== undefined) dbData.social_youtube = settingsData.social.youtube;\n                if (settingsData.social.tiktok !== undefined) dbData.social_tiktok = settingsData.social.tiktok;\n                if (settingsData.social.snapchat !== undefined) dbData.social_snapchat = settingsData.social.snapchat;\n                if (settingsData.social.telegram !== undefined) dbData.social_telegram = settingsData.social.telegram;\n                if (settingsData.social.whatsapp !== undefined) dbData.social_whatsapp = settingsData.social.whatsapp;\n            }\n            if (settingsData.seo) {\n                if (settingsData.seo.metaTitle) dbData.seo_meta_title = settingsData.seo.metaTitle;\n                if (settingsData.seo.metaDescription) dbData.seo_meta_description = settingsData.seo.metaDescription;\n                if (settingsData.seo.keywords) dbData.seo_keywords = settingsData.seo.keywords;\n            }\n            if (settingsData.features) {\n                if (settingsData.features.enableBlog !== undefined) dbData.features_enable_blog = settingsData.features.enableBlog;\n                if (settingsData.features.enableNewsletter !== undefined) dbData.features_enable_newsletter = settingsData.features.enableNewsletter;\n                if (settingsData.features.enableWhatsApp !== undefined) dbData.features_enable_whatsapp = settingsData.features.enableWhatsApp;\n                if (settingsData.features.enableLiveChat !== undefined) dbData.features_enable_live_chat = settingsData.features.enableLiveChat;\n            }\n            if (settingsData.whatsapp) {\n                if (settingsData.whatsapp.phone !== undefined) dbData.whatsapp_phone = settingsData.whatsapp.phone;\n                if (settingsData.whatsapp.enabled !== undefined) dbData.whatsapp_enabled = settingsData.whatsapp.enabled;\n                if (settingsData.whatsapp.defaultMessage !== undefined) dbData.whatsapp_default_message = settingsData.whatsapp.defaultMessage;\n                if (settingsData.whatsapp.businessHours !== undefined) dbData.whatsapp_business_hours = settingsData.whatsapp.businessHours ? JSON.stringify(settingsData.whatsapp.businessHours) : null;\n                if (settingsData.whatsapp.autoReply !== undefined) dbData.whatsapp_auto_reply = settingsData.whatsapp.autoReply;\n                if (settingsData.whatsapp.showOnPages !== undefined) dbData.whatsapp_show_on_pages = settingsData.whatsapp.showOnPages ? JSON.stringify(settingsData.whatsapp.showOnPages) : null;\n            }\n            // Check if settings exist\n            const [existingRows] = await connection.execute(\"SELECT id FROM site_settings LIMIT 1\");\n            const existing = existingRows;\n            if (existing.length > 0) {\n                // Update existing settings\n                const fields = Object.keys(dbData);\n                if (fields.length > 0) {\n                    const setClause = fields.map((field)=>`${field} = ?`).join(\", \");\n                    const values = fields.map((field)=>dbData[field]);\n                    await connection.execute(`UPDATE site_settings SET ${setClause}, updated_at = NOW() WHERE id = ?`, [\n                        ...values,\n                        existing[0].id\n                    ]);\n                }\n            } else {\n                // Insert new settings with defaults\n                const defaultData = {\n                    site_title: \"Premium Choice\",\n                    site_description: \"Your trusted partner in Dubai real estate\",\n                    site_logo: \"/logo.png\",\n                    site_favicon: \"/favicon.ico\",\n                    contact_email: \"admin@example.com\",\n                    contact_phone: null,\n                    contact_address: \"Dubai, UAE\",\n                    contact_whatsapp: null,\n                    social_facebook: \"\",\n                    social_instagram: \"\",\n                    social_twitter: \"\",\n                    social_linkedin: \"\",\n                    social_youtube: \"\",\n                    seo_meta_title: \"Premium Choice - Dubai Real Estate\",\n                    seo_meta_description: \"Discover premium real estate opportunities in Dubai with Premium Choice. Your trusted partner for luxury properties and investment solutions.\",\n                    seo_keywords: \"Dubai real estate, luxury properties, investment, Premium Choice\",\n                    features_enable_blog: true,\n                    features_enable_newsletter: true,\n                    features_enable_whatsapp: true,\n                    features_enable_live_chat: false,\n                    ...dbData\n                };\n                const fields = Object.keys(defaultData);\n                const placeholders = fields.map(()=>\"?\").join(\", \");\n                const values = fields.map((field)=>defaultData[field]);\n                await connection.execute(`INSERT INTO site_settings (${fields.join(\", \")}, created_at, updated_at) VALUES (${placeholders}, NOW(), NOW())`, values);\n            }\n            connection.release();\n            return await this.getSettings();\n        } catch (error) {\n            console.error(\"Error updating settings:\", error);\n            throw error;\n        }\n    }\n    // Presentation slides management\n    static async getPresentationSlides(projectId) {\n        try {\n            const connection = await pool.getConnection();\n            const [rows] = await connection.execute(\"SELECT * FROM presentation_slides WHERE project_id = ? ORDER BY slide_number ASC\", [\n                projectId\n            ]);\n            connection.release();\n            return rows;\n        } catch (error) {\n            console.error(\"Error fetching presentation slides:\", error);\n            return [];\n        }\n    }\n    static async createPresentationSlide(slideData) {\n        try {\n            const connection = await pool.getConnection();\n            // Get the next slide number for this project\n            const [maxSlideRows] = await connection.execute(\"SELECT COALESCE(MAX(slide_number), 0) + 1 as next_slide_number FROM presentation_slides WHERE project_id = ?\", [\n                slideData.project_id\n            ]);\n            const nextSlideNumber = maxSlideRows[0].next_slide_number;\n            const [result] = await connection.execute(`INSERT INTO presentation_slides \n         (project_id, slide_number, title, content, description, image_url, background_image, animation_type, duration, voice_over_url)\n         VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`, [\n                slideData.project_id,\n                slideData.slide_number || nextSlideNumber,\n                slideData.title,\n                slideData.content,\n                slideData.description || null,\n                slideData.image_url || null,\n                slideData.background_image || null,\n                slideData.animation_type || \"fadeIn\",\n                slideData.duration || 5000,\n                slideData.voice_over_url || null\n            ]);\n            connection.release();\n            return result.insertId;\n        } catch (error) {\n            console.error(\"Error creating presentation slide:\", error);\n            throw error;\n        }\n    }\n    static async updatePresentationSlide(slideId, slideData) {\n        try {\n            const connection = await pool.getConnection();\n            const fields = Object.keys(slideData).filter((key)=>key !== \"id\" && key !== \"created_at\");\n            const setClause = fields.map((field)=>`${field} = ?`).join(\", \");\n            const values = fields.map((field)=>slideData[field]);\n            await connection.execute(`UPDATE presentation_slides SET ${setClause} WHERE id = ?`, [\n                ...values,\n                slideId\n            ]);\n            connection.release();\n            return true;\n        } catch (error) {\n            console.error(\"Error updating presentation slide:\", error);\n            return false;\n        }\n    }\n    static async deletePresentationSlide(slideId) {\n        try {\n            const connection = await pool.getConnection();\n            await connection.execute(\"DELETE FROM presentation_slides WHERE id = ?\", [\n                slideId\n            ]);\n            connection.release();\n            return true;\n        } catch (error) {\n            console.error(\"Error deleting presentation slide:\", error);\n            return false;\n        }\n    }\n    static async deletePresentationSlidesByProject(projectId) {\n        try {\n            const connection = await pool.getConnection();\n            await connection.execute(\"DELETE FROM presentation_slides WHERE project_id = ?\", [\n                projectId\n            ]);\n            connection.release();\n            return true;\n        } catch (error) {\n            console.error(\"Error deleting presentation slides for project:\", error);\n            return false;\n        }\n    }\n    // Hero Images Management\n    static async getHeroImages() {\n        try {\n            const connection = await pool.getConnection();\n            const [rows] = await connection.execute(\"SELECT * FROM hero_images ORDER BY order_index ASC, created_at DESC\");\n            connection.release();\n            return rows;\n        } catch (error) {\n            console.error(\"Error fetching hero images:\", error);\n            return [];\n        }\n    }\n    static async createHeroImage(imageData) {\n        try {\n            const connection = await pool.getConnection();\n            // Get the next order index\n            const [maxOrderRows] = await connection.execute(\"SELECT COALESCE(MAX(order_index), 0) + 1 as next_order FROM hero_images\");\n            const nextOrder = maxOrderRows[0].next_order;\n            const [result] = await connection.execute(`INSERT INTO hero_images \n         (url, title, description, alt_text, is_active, order_index, created_at, updated_at)\n         VALUES (?, ?, ?, ?, ?, ?, NOW(), NOW())`, [\n                imageData.url,\n                imageData.title,\n                imageData.description || null,\n                imageData.alt_text || imageData.title,\n                imageData.is_active !== undefined ? imageData.is_active : true,\n                imageData.order_index || nextOrder\n            ]);\n            const insertId = result.insertId;\n            // Fetch and return the created image\n            const [newImageRows] = await connection.execute(\"SELECT * FROM hero_images WHERE id = ?\", [\n                insertId\n            ]);\n            connection.release();\n            return newImageRows[0];\n        } catch (error) {\n            console.error(\"Error creating hero image:\", error);\n            throw error;\n        }\n    }\n    static async updateHeroImage(imageId, imageData) {\n        try {\n            const connection = await pool.getConnection();\n            const fields = Object.keys(imageData).filter((key)=>key !== \"id\" && key !== \"created_at\" && key !== \"updated_at\");\n            if (fields.length === 0) {\n                connection.release();\n                return true;\n            }\n            const setClause = fields.map((field)=>`${field} = ?`).join(\", \");\n            const values = fields.map((field)=>imageData[field]);\n            const [result] = await connection.execute(`UPDATE hero_images SET ${setClause}, updated_at = NOW() WHERE id = ?`, [\n                ...values,\n                imageId\n            ]);\n            connection.release();\n            return result.affectedRows > 0;\n        } catch (error) {\n            console.error(\"Error updating hero image:\", error);\n            return false;\n        }\n    }\n    static async deleteHeroImage(imageId) {\n        try {\n            const connection = await pool.getConnection();\n            const [result] = await connection.execute(\"DELETE FROM hero_images WHERE id = ?\", [\n                imageId\n            ]);\n            connection.release();\n            return result.affectedRows > 0;\n        } catch (error) {\n            console.error(\"Error deleting hero image:\", error);\n            return false;\n        }\n    }\n    // AI API Settings Management\n    static async getAISettings() {\n        try {\n            const connection = await pool.getConnection();\n            const [rows] = await connection.execute(\"SELECT * FROM ai_api_settings ORDER BY created_at DESC LIMIT 1\");\n            connection.release();\n            const settings = rows;\n            return settings.length > 0 ? settings[0] : null;\n        } catch (error) {\n            console.error(\"Error fetching AI settings:\", error);\n            return null;\n        }\n    }\n    static async saveAISettings(settingsData) {\n        try {\n            const connection = await pool.getConnection();\n            // Check if settings exist\n            const [existingRows] = await connection.execute(\"SELECT id FROM ai_api_settings LIMIT 1\");\n            const existing = existingRows;\n            if (existing.length > 0) {\n                // Update existing settings\n                await connection.execute(`UPDATE ai_api_settings SET \n           openai_api_key = ?, openai_model = ?, openai_max_tokens = ?, openai_temperature = ?,\n           gemini_api_key = ?, gemini_model = ?, claude_api_key = ?, claude_model = ?,\n           deepseek_api_key = ?, deepseek_model = ?, deepseek_max_tokens = ?, deepseek_temperature = ?,\n           default_provider = ?, ai_enabled = ?, rate_limit_per_minute = ?, rate_limit_per_hour = ?,\n           system_prompt = ?, property_suggestions_enabled = ?, property_suggestions_count = ?, contact_info_in_responses = ?,\n           updated_at = NOW()\n           WHERE id = ?`, [\n                    settingsData.openai_api_key || \"\",\n                    settingsData.openai_model || \"gpt-3.5-turbo\",\n                    settingsData.openai_max_tokens || 1000,\n                    settingsData.openai_temperature || 0.7,\n                    settingsData.gemini_api_key || \"\",\n                    settingsData.gemini_model || \"gemini-pro\",\n                    settingsData.claude_api_key || \"\",\n                    settingsData.claude_model || \"claude-3-sonnet-20240229\",\n                    settingsData.deepseek_api_key || \"\",\n                    settingsData.deepseek_model || \"deepseek-chat\",\n                    settingsData.deepseek_max_tokens || 1000,\n                    settingsData.deepseek_temperature || 0.7,\n                    settingsData.default_provider || \"openai\",\n                    settingsData.ai_enabled !== undefined ? settingsData.ai_enabled : true,\n                    settingsData.rate_limit_per_minute || 10,\n                    settingsData.rate_limit_per_hour || 100,\n                    settingsData.system_prompt || \"You are an expert real estate consultant with deep knowledge of the Dubai and UAE property market.\",\n                    settingsData.property_suggestions_enabled !== undefined ? settingsData.property_suggestions_enabled : true,\n                    settingsData.property_suggestions_count || 4,\n                    settingsData.contact_info_in_responses !== undefined ? settingsData.contact_info_in_responses : true,\n                    existing[0].id\n                ]);\n            } else {\n                // Insert new settings\n                await connection.execute(`INSERT INTO ai_api_settings \n           (openai_api_key, openai_model, openai_max_tokens, openai_temperature,\n            gemini_api_key, gemini_model, claude_api_key, claude_model,\n            deepseek_api_key, deepseek_model, deepseek_max_tokens, deepseek_temperature,\n            default_provider, ai_enabled, rate_limit_per_minute, rate_limit_per_hour,\n            system_prompt, property_suggestions_enabled, property_suggestions_count, contact_info_in_responses,\n            created_at, updated_at)\n           VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())`, [\n                    settingsData.openai_api_key || \"\",\n                    settingsData.openai_model || \"gpt-3.5-turbo\",\n                    settingsData.openai_max_tokens || 1000,\n                    settingsData.openai_temperature || 0.7,\n                    settingsData.gemini_api_key || \"\",\n                    settingsData.gemini_model || \"gemini-pro\",\n                    settingsData.claude_api_key || \"\",\n                    settingsData.claude_model || \"claude-3-sonnet-20240229\",\n                    settingsData.deepseek_api_key || \"\",\n                    settingsData.deepseek_model || \"deepseek-chat\",\n                    settingsData.deepseek_max_tokens || 1000,\n                    settingsData.deepseek_temperature || 0.7,\n                    settingsData.default_provider || \"openai\",\n                    settingsData.ai_enabled !== undefined ? settingsData.ai_enabled : true,\n                    settingsData.rate_limit_per_minute || 10,\n                    settingsData.rate_limit_per_hour || 100,\n                    settingsData.system_prompt || \"You are an expert real estate consultant with deep knowledge of the Dubai and UAE property market.\",\n                    settingsData.property_suggestions_enabled !== undefined ? settingsData.property_suggestions_enabled : true,\n                    settingsData.property_suggestions_count || 4,\n                    settingsData.contact_info_in_responses !== undefined ? settingsData.contact_info_in_responses : true\n                ]);\n            }\n            connection.release();\n            return await this.getAISettings();\n        } catch (error) {\n            console.error(\"Error saving AI settings:\", error);\n            throw error;\n        }\n    }\n    // Activity Logging Methods\n    static async getRecentActivities(limit = 10, frontendOnly = false) {\n        try {\n            const connection = await pool.getConnection();\n            let query = `SELECT id, timestamp, level, category, message, details \n                   FROM system_logs`;\n            let params = [];\n            if (frontendOnly) {\n                // Filter for frontend-relevant activities only\n                query += ` WHERE category IN ('project', 'developer', 'article', 'media')`;\n            }\n            query += ` ORDER BY timestamp DESC LIMIT ?`;\n            params.push(limit);\n            const [rows] = await connection.execute(query, params);\n            connection.release();\n            return rows.map((row)=>({\n                    id: row.id,\n                    timestamp: row.timestamp,\n                    level: row.level,\n                    category: row.category,\n                    message: row.message,\n                    details: row.details ? JSON.parse(row.details) : null\n                }));\n        } catch (error) {\n            console.error(\"Error fetching recent activities:\", error);\n            throw error;\n        }\n    }\n    static async createActivity(activityData) {\n        try {\n            const connection = await pool.getConnection();\n            const [result] = await connection.execute(`INSERT INTO system_logs (level, category, message, details, timestamp) \n         VALUES (?, ?, ?, ?, NOW())`, [\n                activityData.level,\n                activityData.category,\n                activityData.message,\n                activityData.details\n            ]);\n            const insertId = result.insertId;\n            // Fetch the created activity\n            const [rows] = await connection.execute(`SELECT id, timestamp, level, category, message, details \n         FROM system_logs \n         WHERE id = ?`, [\n                insertId\n            ]);\n            connection.release();\n            const row = rows[0];\n            return {\n                id: row.id,\n                timestamp: row.timestamp,\n                level: row.level,\n                category: row.category,\n                message: row.message,\n                details: row.details ? JSON.parse(row.details) : null\n            };\n        } catch (error) {\n            console.error(\"Error creating activity:\", error);\n            throw error;\n        }\n    }\n}\n// Standalone query function for backward compatibility\nconst query = MySQLDatabase.query.bind(MySQLDatabase);\n// Export getDatabase function for backward compatibility\nasync function getDatabase() {\n    return pool;\n}\n// Export getConnection function for backward compatibility\nasync function getConnection() {\n    return await pool.getConnection();\n}\n// Export Database class alias for compatibility\nconst Database = MySQLDatabase;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MySQLDatabase);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/mysql-database.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/mysql2","vendor-chunks/aws-ssl-profiles","vendor-chunks/iconv-lite","vendor-chunks/long","vendor-chunks/lru-cache","vendor-chunks/denque","vendor-chunks/is-property","vendor-chunks/lru.min","vendor-chunks/sqlstring","vendor-chunks/seq-queue","vendor-chunks/named-placeholders","vendor-chunks/generate-function","vendor-chunks/safer-buffer"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadmin%2Factivities%2Froute&page=%2Fapi%2Fadmin%2Factivities%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Factivities%2Froute.ts&appDir=C%3A%5CUsers%5CBerlin%5CDesktop%5Csssq-main%5Csssq-main%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CBerlin%5CDesktop%5Csssq-main%5Csssq-main&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();